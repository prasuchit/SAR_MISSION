#include "ros/ros.h"
#include "std_msgs/String.h"

#include <sstream>
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <iostream>
#include <cv_bridge/cv_bridge.h>
#include <sensor_msgs/image_encodings.h>
#include "sensor_msgs/Image.h"
#include <cstdlib>
#include <string>

#include "img_mission/returnString.h"

 ros::NodeHandle nh;
 ros::Subscriber sub;

void callback(const sensor_msgs::Image& image)
{

  cv_bridge::CvImagePtr cv_ptr = nullptr;
  Mat images;

  if(sensor_msgs::image_encodings::isColor(image.encoding)) {
    cv_ptr = cv_bridge::toCvCopy(image, sensor_msgs::image_encodings::BGR8);
  } 
  
  if(cv_ptr) {
    cv::Mat imgMat = cv_ptr->image;
    images = imgMat;//imread(imgMat, CV_LOAD_IMAGE_COLOR); 
    std::cout << "Got an image!" << std::endl;
  } 
  
  if(! images.data )                              // Check for invalid input
    {
      cout <<  "Could not open or find the image" << std::endl ;
      return;
    }

    namedWindow( "Display window", WINDOW_AUTOSIZE );// Create a window for display.
    imshow( "Display window", images );               // Show our image inside it.
}



bool check(img_mission::returnString::Request  &req,
	   img_mission::returnString::Response &res)
{
  sub = nh.subscribe("/camera/rgb/image_raw", 1000, callback);
  res.result = "Fertig";
  return true;
}

int main(int argc, char **argv)
{
  ros::init(argc, argv, "GetThatString");
  ros::NodeHandle n;
 
  ros::ServiceServer service = n.advertiseService("store_name", check);
  ROS_INFO("Ready to store the strings.");
  ros::spin();

  return 0;
}

